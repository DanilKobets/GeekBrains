# Урок 7. Функции высшего порядка


#Задача 1

# Задача №47. Решение в группах
# У вас есть код, который вы не можете менять (так часто бывает, когда код в глубине
# программы используется множество раз и вы не хотите ничего сломать):
# transformation = <???>
# values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29] # или любой другой список
# transormed_values = list(map(transformation, values))
# Единственный способ вашего взаимодействия с этим кодом - посредством задания
# функции transformation.
# Однако вы поняли, что для вашей текущей задачи вам не нужно никак преобразовывать
# список значений, а нужно получить его как есть.
# Напишите такое лямбда-выражение transformation, чтобы transformed_values получился
# копией values.

#Вариант 1
values = [2, 3, 5, 7, 11, 13, 17, 19, 23, 29]

#С помощью списка
# transformed_values = values[:]
print(values)
# print(transformation)

#С помощью lambda - (Функция)
transformation = lambda item: item + 2
transformed_values = list(map(transformation, values))
print(transformed_values)


#Задача 2 (пример)
nums_list = [1, 5, 8, 3, 6, 10]
new_nums_list = list(map(lambda x: x / 5 if (x % 2) else x * 3, nums_list))
print(new_nums_list)

#Задача 3
# Планеты вращаются вокруг звезд по эллиптическим орбитам.
# Назовем самой далекой планетой ту, орбита которой имеет
# самую большую площадь. Напишите функцию
# find_farthest_orbit(list_of_orbits), которая среди списка орбит
# планет найдет ту, по которой вращается самая далекая
# планета. Круговые орбиты не учитывайте: вы знаете, что у
# вашей звезды таких планет нет, зато искусственные спутники
# были были запущены на круговые орбиты. Результатом
# функции должен быть кортеж, содержащий длины полуосей
# эллипса орбиты самой далекой планеты. Каждая орбита
# представляет из себя кортеж из пары чисел - полуосей ее
# эллипса. Площадь эллипса вычисляется по формуле S = pi*a*b,
# где a и b - длины полуосей эллипса. При решении задачи
# используйте списочные выражения. Подсказка: проще всего
# будет найти эллипс в два шага: сначала вычислить самую
# большую площадь эллипса, а затем найти и сам эллипс,
# имеющий такую площадь. Гарантируется, что самая далекая
# планета ровно одна

# Ввод:
# orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
# print(*find_farthest_orbit(orbits))
# Вывод:
# 2.5 10

#Вариант 1
def max_orbit(my_list):
    maxx = [(i[0] * i[1]) if (i[0] != i[1]) else 0 for i in my_list]
    return my_list[maxx.index(max(maxx))]

orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(max_orbit(orbits))

#Вариант 2
def max_orbit(my_list):
# (1, 3)
    s_orbits = [(x_1*x_2 if x_1 != x_2 else 0) for x_1, x_2 in my_list]
    return my_list[s_orbits.index(max(s_orbits))]
orbits = [(1, 3), (2.5, 10), (7, 2), (6, 6), (4, 3)]
print(max_orbit(orbits))


#Разбор примера
test_lst = [1, 4, 5, 6]
# что сделать? где взять? *условие
new_lst = [item for item in test_lst if item != 5]
print(new_lst)

#Задача 4 
# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.
# Ввод: Вывод:
# values = [0, 2, 10, 6] same
# if same_by(lambda x: x % 2, values):
# print(‘same’)
# else:
# print(‘different’)

#Вариант 1
def same_by(func, objs):
    return len(set(map(func, objs))) < 2
values = [0, 2, 10, 6]
if same_by(lambda x: x % 2, values):
    print('same')
else:
    print('different')